# some print list function in CMakePrintHelpers is showing all on one line,
# which is difficult to distinguish
function(print_target_property target target_property)
    get_target_property(property ${target} ${target_property})
    # list (SORT property)
    list(REMOVE_DUPLICATES property)
    list(LENGTH property property_len)
    message(STATUS "${target} ${target_property} length: " ${property_len})
    foreach (_variableName ${property})
        message(STATUS "\t${_variableName}")
    endforeach()
endfunction()

function(print_list list_var message)
    list(LENGTH ${list_var} list_length)
    message(STATUS ${message} "(length: ${list_length})")
    foreach(item ${${list_var}})
        message(STATUS "\t${item}")
    endforeach()
endfunction()

function(list_dir_recursively variable directory)
    file(GLOB_RECURSE ALL_ITEMS LIST_DIRECTORIES true CONFIGURE_DEPENDS "*")
    foreach(ITEM ${ALL_ITEMS})
        if(IS_DIRECTORY ${ITEM})
            list(APPEND SUB_DIRECTORIES_LIST ${ITEM})
        endif()
    endforeach()
    set(${variable} ${SUB_DIRECTORIES_LIST} PARENT_SCOPE)
endfunction()

function(get_all_targets var)
    set(targets)
    get_all_targets_recursive(targets ${CMAKE_CURRENT_SOURCE_DIR})
    set(${var} ${targets} PARENT_SCOPE)
endfunction()

function(get_all_targets_of_dir var dir)
    set(targets)
    get_all_targets_recursive(targets ${dir})
    set(${var} ${targets} PARENT_SCOPE)
endfunction()

macro(get_all_targets_recursive targets dir)
    get_property(subdirectories DIRECTORY ${dir} PROPERTY SUBDIRECTORIES)
    foreach(subdir ${subdirectories})
        get_all_targets_recursive(${targets} ${subdir})
    endforeach()

    get_property(current_targets DIRECTORY ${dir} PROPERTY BUILDSYSTEM_TARGETS)
    list(APPEND ${targets} ${current_targets})
endmacro()

function(get_brew_pkg_path formula pkg_path)
    # execute_process(COMMAND brew info ${formula}
    #     OUTPUT_VARIABLE formula_OUTPUT
    # )
    # if (formula_OUTPUT MATCHES "export PKG_CONFIG_PATH=")
    #     string(REGEX REPLACE ".*export PKG_CONFIG_PATH=\"(.*)\".*" "\\1"
    #         formula_PKG_CONFIG_PATH ${formula_OUTPUT})
    #     message(STATUS "get_brew_pkg_path ${formula}: " ${formula_PKG_CONFIG_PATH})
    #     set(${pkg_path} ${formula_PKG_CONFIG_PATH} PARENT_SCOPE)
    # else()
    #     message(${formula_OUTPUT})
    #     set(${pkg_path} ${formula}_PKG_CONFIG_PATH-NOTFOUND PARENT_SCOPE)
    # endif()

    execute_process(COMMAND brew --prefix ${formula}
        OUTPUT_VARIABLE formula_OUTPUT
    )
    if (formula_OUTPUT MATCHES "/usr/local/opt/")
        string(REGEX REPLACE "\n$" ""
            formula_PKG_CONFIG_PATH ${formula_OUTPUT})
        set(formula_PKG_CONFIG_PATH ${formula_PKG_CONFIG_PATH}/lib/pkgconfig)
        message(STATUS "get_brew_pkg_path ${formula}: " ${formula_PKG_CONFIG_PATH})
        set(${pkg_path} ${formula_PKG_CONFIG_PATH} PARENT_SCOPE)
    else()
        message(${formula_OUTPUT})
        message(STATUS "brew prefix ${formula} invalid")
        set(${pkg_path} ${formula}_PKG_CONFIG_PATH-NOTFOUND PARENT_SCOPE)
    endif()
endfunction()

function(append_brew_pkg_path_to_env formula)
    get_brew_pkg_path(${formula} formula_pkg_path)
    if (formula_pkg_path)
        if (DEFINED ENV{PKG_CONFIG_PATH})
            set(ENV{PKG_CONFIG_PATH} $ENV{PKG_CONFIG_PATH}:${formula_pkg_path})
        else()
            set(ENV{PKG_CONFIG_PATH} ${formula_pkg_path})
        endif()
        message(STATUS "ENV{PKG_CONFIG_PATH}: " $ENV{PKG_CONFIG_PATH})
    else()
        message(STATUS "append_brew_pkg_path_to_env failed: " ${formula} ${formula_pkg_path})
    endif()
endfunction()
